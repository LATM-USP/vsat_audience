---
import type { PublishedStory } from "@domain/story/publish/types";

type Props = {
  story: PublishedStory;
};

const { story } = Astro.props;
---

{/* Dump the entire story so that it's available on the client-side */}
<script set:html={`window.current = { story: ${JSON.stringify(story)}}`} />

<script>
  import {
    isHeadingBlock,
    isLinkBlock,
    isPlaintextBlock,
  } from "@domain/story/publish/support/isBlock";
  import openingPageFor from "@domain/story/publish/support/openingPage";
  import openingSceneFor from "@domain/story/publish/support/openingScene";
  import type { LinkTarget } from "@domain/story/publish/types";

  import changePage from "./changePage";
  import { EVENT_LINK_ACTIVATED } from "./linkActivated";
  import type { Current } from "./types";

  AFRAME.registerComponent("story", {
    init: function () {
      window.current.scene = openingSceneFor(window.current.story);
      window.current.page = openingPageFor(window.current.scene);

      this.render(window.current);
    },
    events: {
      [EVENT_LINK_ACTIVATED]: function (e: CustomEvent<LinkTarget>) {
        const link = e.detail;

        const change = changePage(window.current.story)(
          link,
          window.current.scene,
        );

        if (change) {
          window.current.page = change.toPage;

          if (change.toScene) {
            window.current.scene = change.toScene;
          }

          this.render(window.current);
        }
      },
      pointermove: function () {
        const sound = this.el.components.sound;
        if (!sound?.isPlaying) {
          sound.playSound();
        }
      },
    },
    render: function (current: Current) {
      const sky = document.querySelector("a-sky");
      if (sky) {
        if (current.scene.image) {
          sky.setAttribute("src", `#image-${current.scene.image.id}`);
        } else {
          sky.removeAttribute("src");
        }
      }

      const existingSound = this.el.components.sound;
      if (existingSound?.isPlaying) {
        existingSound.stopSound();
      }
      if (current.scene.audio) {
        this.el.setAttribute(
          "sound",
          `src: #audio-${current.scene.audio.id}; autoplay: false; positional: false`,
        );
      } else {
        this.el.removeAttribute("sound");
      }

      const fiction = document.getElementById("fiction");
      if (fiction) {
        removeAllChildNodes(fiction);

        const heading = (() => {
          const text = current.page.content.find(isHeadingBlock)?.text;

          const entity = document.createElement("a-text");
          entity.setAttribute("block-heading", `text: ${text}`);
          entity.setAttribute("layout", "type: box; plane: yz; margin: 0.25;");

          return entity;
        })();

        const content = (() => {
          const text = current.page.content
            .filter(isPlaintextBlock)
            .map((block) => block.text)
            .join("\n\n");

          const entity = document.createElement("a-entity");
          entity.setAttribute("block-plaintext", `text: ${text}`);
          entity.setAttribute("layout", "type: box; plane: yz; margin: 0.25;");

          /*
           * We need to calculate the height dynamically, 'cos it might be long
           * enough to wrap across multiple lines.
           */
          const numberOfLines = Math.max(Math.trunc(text.length / 50), 1);
          const numberOfNewlines = text.matchAll(/\n/g).toArray().length;
          const lineCount = numberOfLines + numberOfNewlines;
          const height = lineCount == 1 ? 1.75 : (lineCount - 1) * 0.85;

          entity.setAttribute("height", height);

          return entity;
        })();

        const links = (() => {
          const linkBlocks = current.page.content.filter(isLinkBlock);

          const elements = linkBlocks.map((block) => {
            const entity = document.createElement("a-entity");
            entity.setAttribute(
              "block-link",
              `text: ${block.text}; link: ${block.link}`,
            );
            entity.setAttribute(
              "layout",
              "type: box; plane: yz; margin: 0.25;",
            );

            return entity;
          });

          return elements;
        })();

        links.forEach((link) => fiction.appendChild(link));
        fiction.appendChild(content);
        fiction.appendChild(heading);
      }
    },
  });

  AFRAME.registerComponent("block-heading", {
    schema: {
      text: { type: "string", default: "" },
    },
    init: function () {
      const theText = document.createElement("a-troika-text");
      theText.setAttribute("value", this.data.text);
      theText.setAttribute("font-size", "0.25");
      theText.setAttribute("max-width", "6");

      const theBackground = document.createElement("a-box");
      theBackground.setAttribute("class", "clickable");
      theBackground.setAttribute("color", "#2C3E50");
      theBackground.setAttribute("width", "7");
      theBackground.setAttribute("height", "1");
      theBackground.setAttribute("depth", "0.25");
      theBackground.setAttribute("opacity", "0.75");

      this.el.appendChild(theBackground);
      this.el.appendChild(theText);
    },
  });

  AFRAME.registerComponent("block-plaintext", {
    schema: {
      text: { type: "string", default: "" },
    },
    init: function () {
      const theText = document.createElement("a-troika-text");
      theText.setAttribute("value", this.data.text);
      theText.setAttribute("color", "#2C3E50");
      theText.setAttribute("max-width", "5.5");
      theText.setAttribute("line-height", "2");

      const theBackground = document.createElement("a-box");
      theBackground.setAttribute("color", "#FBEEE6");
      theBackground.setAttribute("width", "7");
      theBackground.setAttribute("depth", "0.25");
      theBackground.setAttribute("opacity", "0.75");

      this.el.appendChild(theBackground);
      this.el.appendChild(theText);
    },
  });

  AFRAME.registerComponent("block-link", {
    schema: {
      text: { type: "string", default: "" },
      link: { type: "string", default: "" },
    },
    init: function () {
      const theText = document.createElement("a-troika-text");
      theText.setAttribute("value", this.data.text);
      theText.setAttribute("data-raycastable", "");
      theText.setAttribute("color", "#ecf0f1");

      const colorButtonNeutral = "#2C3E50";

      const theButton = document.createElement("a-box");
      theButton.setAttribute("width", "7");
      theButton.setAttribute("depth", "0.25");
      theButton.setAttribute("opacity", "0.75");
      theButton.setAttribute("color", colorButtonNeutral);
      theButton.setAttribute("event-set__mouseenter", "color: #3C5976");
      theButton.setAttribute(
        "event-set__mouseleave",
        `color: ${colorButtonNeutral}`,
      );

      this.el.appendChild(theButton);
      this.el.appendChild(theText);
    },
    events: {
      click: function () {
        this.el.emit(EVENT_LINK_ACTIVATED, this.data.link);
      },
    },
  });

  function removeAllChildNodes(parent: Node) {
    while (parent.firstChild) {
      parent.removeChild(parent.firstChild);
    }
  }
</script>
